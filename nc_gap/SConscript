# -*- python -*-

tools=['default', 'prefixoptions', 'netcdf']
env = Environment(tools=tools)
env.Append(CXXFLAGS='-g -Werror')

# The Configure context is just being used as a check here.  We don't want
# the checks to affect the special linking setup above by appending
# libraries to LIBS.  Thus we create the context on a copy of the
# environment, and we don't use the Finish()ed product.  All the Configure
# checks appeared to do before were add -lnetcdf_c++ and -lpq to the LIBS,
# but those had already been given on the command line anyway.  Really this
# could be removed, since if netcdf or pq aren't installed, then the build
# will still fail.  However it's left here in case someday someone wants to
# really make it work.

conf = Configure(env.Clone())
if not conf.CheckLibWithHeader('netcdf', 'netcdf.h', 'C'):
    print 'netCDF must be installed!'
    Exit(1)

if not conf.CheckLibWithHeader('netcdf_c++', 'netcdfcpp.h', 'C++'):
    print 'netCDF C++ must be installed!'
    Exit(1)


# As mentioned above, we need to ignore the alterations Configure
# makes to the environment.
# env = conf.Finish()

# If you rely on Configure to add libraries, you have to check for them in
# reverse order of their dependencies, ie, check for netcdf before
# netcdf_c++, otherwise netcdf_c++ cannot be linked.  However, when
# statically linking, that means the libraries need to be listed in LIBS in
# the reverse order they are checked by Configure.  Since at the moment
# Configure is not being used to add to LIBS, we don't need this.
# env['LIBS'].reverse()

# print env.Dump()

nc_gap = env.Program('nc_gap.cc')
env.Default(nc_gap)

env.Install('$INSTALL_PREFIX/bin', 'nc_gap')
