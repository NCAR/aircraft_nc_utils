#! /usr/bin/env python3

#############################################################################
# Command Line Utility to convert a RAF NetCDF file to ASCII
#############################################################################

import os
import sys
import argparse
import imp
import netCDF4
import pandas as pd
nc2asc=imp.load_source('nc2asc','/opt/local/bin/nc2asc')
#############################################################################
# Define main function
#############################################################################
def main():

    cl = nc2asc_CL()
    args = cl.parse_args()
    cl.processData(args)

#############################################################################
# nc2asc CL Class
#############################################################################

class nc2asc_CL():

    def parse_args(self):
        # set up argument parsing
        parser = argparse.ArgumentParser(
            description='Provide (Optional) (-i) Input File (Optional) (-o) Output File and (-b) Batch File')

        # define input file(s) to process
        parser.add_argument('-i', '--input_file', type=str, help='(Optional) Input file to convert' + 'e.g. /scr/raf_data/<PROJECT>/PROJECTrf01.nc')
        parser.add_argument('-o', '--output_file_cl', type=str, help='(Optional) Output file')
        parser.add_argument('-b', '--batch_file', type=str, help='Batch file')

        if len(sys.argv) == 1:
            parser.print_help(sys.stderr)
            sys.exit(1)

        args = parser.parse_args()
        return(args)

#######################################################################
# Define processing function
#######################################################################
    def processData(self, args):
        self.timeHandler = nc2asc.gui.timeHandler
        self.input_file = args.input_file
        self.output_file_cl = args.output_file_cl
        self.inputbatch_file = args.batch_file
        try:
            print('****Storing Command Line Arguments****')
            print('INPUT FILE:'+self.input_file)
            print('OUTPUT_FILE:'+self.output_file_cl)
            print('BATCH_FILE:'+self.inputbatch_file)
        except:
            print('Error getting command line arguments.')
        # try to get batch file from the gui prompt if in gui mode
        try:
            self.inputbatch_file = self.inputbatch_file
        except:
            try:
                self.inputbatch_file, _ = QFileDialog.getOpenFileName(self,"Select a Batch file to Read", "/scr/raf_data","filter = *")
            except:
                pass

        try:
            nc = netCDF4.Dataset(self.input_file, mode='r')
            self.asc = {}
            for i in nc.variables.keys():
                dims = str(nc.variables[i].dimensions)
                if dims == "('Time',)":
                    output=nc[i][:]
                    self.asc[i]=pd.DataFrame(output)
                else:
                    pass
            # concatenate
            self.asc=pd.concat(self.asc, axis=1, ignore_index=False)
        except Exception as e:
            print(e)

        try:
            with open(self.inputbatch_file, 'r') as fil:
                # create empty placeholders
                self.variables_extract_batch = []
                self.output_file = []
                self.asc_new_batch = pd.DataFrame()
                for ln in fil:

                    if ln.startswith('if='):
                        ip = input('Please confirm: would you like to use the input file from the batchfile? (Yes = y or Y and Enter, No = anything else)')
                        if ip == 'Y' or 'y':
                            self.input_file = []
                            self.input_file.append(ln[2:])
                        else:
                            pass

                    elif ln.startswith('of='):
                        of = input('Please confirm: would you like to use the output file from the batchfile? (Yes = y or Y and Enter, No = anything else)')
                        if of == 'Y' or 'y':
                            self.output_file = []
                            self.output_file.append(ln[2:])
                        else:
                            pass
                    # get the header format from the batch file
                    if ln.startswith('hd=Plain'):
                        try:
                            self.header1.setChecked(True)
                        except:
                            self.header = 'Plain'
                    elif ln.startswith('hd=ICARTT'):
                        try:
                            self.header2.setChecked(True)
                        except:
                            self.header = 'ICARTT'
                    elif ln.startswith('hd=AMES'):
                        try:
                            self.header3.setChecked(True)
                        except:
                            self.header = 'AMES'
                    elif ln.startswith('dt=yyyy-mm-dd'):
                        try:
                            self.date1.setChecked(True)
                        except:
                            self.date = 'yyyy-mm-dd'
                    elif ln.startswith('dt=yyyy mm dd'):
                        try:
                            self.date2.setChecked(True)
                        except:
                            self.date = 'yyyy mm dd'
                    elif ln.startswith('dt=NoDate'):
                        try:
                            self.date3.setChecked(True)
                        except:
                            self.date = 'NoDate'
                    elif ln.startswith('tm=hh:mm:ss'):
                        try:
                            self.time1.setChecked(True)
                        except:
                            self.time = 'hh:mm:ss'
                    elif ln.startswith('tm=hh mm ss'):
                        try:
                            self.time2.setChecked(True)
                        except:
                            self.time = 'hh mm ss'
                    elif ln.startswith('tm=SecOfDay'):
                        try:
                            self.time3.setChecked(True)
                        except:
                            self.time = 'SecOfDay'
                    elif ln.startswith('sp=comma'):
                        try:
                            self.comma.setChecked(True)
                        except:
                            self.delimiter = 'comma'
                    elif ln.startswith('sp=space'):
                        try:
                            self.space.setChecked(True)
                        except:
                            self.delimiter = 'space'
                    elif ln.startswith('fv=-32767'):
                        try:
                            self.fillvalue1.setChecked(True)
                        except:
                            self.fillvalue = '-32767'
                    elif ln.startswith('fv=blank'):
                        try:
                            self.fillvalue2.setChecked(True)
                        except:
                            self.fillvalue = 'blank'
                    elif ln.startswith('fv=replicate'):
                        try:
                            self.fillvalue3.setChecked(True)
                        except:
                            self.fillvalue = 'replicate'
                    # get the average value (if provided) from the bath file
                    elif ln.startswith('avg='):
                        self.avg = ln[2:]
                    elif ln.startswith('Vars='):
                        var_batchfile = str(ln)
                        if var_batchfile not in self.variables_extract_batch:
                            self.variables_extract_batch.append(var_batchfile.replace('Vars=', '').replace('\n', '').replace("'", '').replace('[', '').replace(']', ''))
                # format averaging
                self.avg = self.avg.replace('[', '')
                self.avg = self.avg.replace("'", '')
                self.avg = self.avg.replace('=', '')
                self.avg = self.avg.replace(']', '')
                self.avg = self.avg.replace('g', '')
                self.avg = self.avg[:-1]
            #self.variables_extract_batch = pd.Series(self.variables_extract_batch)
            for x in range(len(self.variables_extract_batch)): 
                self.asc_new_batch = pd.concat([self.asc_new_batch, self.asc[self.variables_extract_batch[x]]], axis=1, ignore_index=False)
            self.asc_new_batch.columns = [self.variables_extract_batch]
        except Exception as e:
            print(e)
        try:
            for i in self.variables_extract_batch:
                if i not in nc.variables.keys():
                    print('***WARNING****Var '+str(i)+' not in netCDF file!!! Continuing with conversion****')
                else:
                    pass
        except Exception as e:
            print(e)

        try:
            print('****Formatting data from input file. If CL argument provided, using by default.****')
            nc2asc.gui.formatData(self)
            print('Data formatted successfully.')
        except:
            print('Error formatting data.')
        try:
            print('****Writing Data to Output File****')
            try:
                os.system('rm '+args.output_file_cl)
            except:
                pass
            nc2asc.gui.writeData(self)
            print('****Data Output Successfully Written****')
        except:
            print('****Error writing to output file.****')
#######################################################################
# Call main function
#######################################################################
if __name__ == "__main__":
    main()
