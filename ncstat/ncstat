#!/usr/bin/env python

# Copyright (c) 2016, University Corporation for Atmospheric Research
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Authors: Nicholas DeCicco <nsd.cicco@gmail.com> - initial version
# 	   Tyler Lugger <tlugger@ucar.edu> - major revisions and added functionality

import sys
import numpy as np
from netCDF4 import Dataset
import math
import argparse
import re
import time
import datetime

# Add flags to parser for more customized output
class StatParser(argparse.ArgumentParser):
    def error(self, message):
        self.print_help()
        sys.exit(2)

parser = StatParser(add_help=False)
parser.add_argument("-c", help="Print statistics in separated columns", action='store_true')
parser.add_argument("-v", "--vars", nargs="+", help="Print subset of file variables. VARS should be space separated. A '+' can be used to match multiple VARS")
parser.add_argument("-f", "--file", nargs=1, help="Input netCDF file", required=True)
parser.add_argument("-p", "--precision", nargs=1, help="Set precision of output")
parser.add_argument("-t", "--time", nargs=2, help="Set time range of output. Accepts two time variables in the format HH:mm:SS")
args, unknown = parser.parse_known_args()


ncFileName = args.file[0]
ncFile = Dataset(ncFileName, 'r') # for netCDF4 module


def multiply(numbers):
    total = 1
    for x in numbers:
	total *=x
    return total

def stats(var):
    if args.time:
	ncFile.variables[var] = ncFile.variables[var][start_t:end_t]

    # Remove missing values from statistics calculations
    ncFile.variables[var] = np.ma.masked_equal(ncFile.variables[var],-32767)
    nmissing = np.ma.count_masked(ncFile.variables[var])
    min = np.min(ncFile.variables[var])
    max = np.max(ncFile.variables[var])
    mean = np.mean(ncFile.variables[var])
    variance = np.var(ncFile.variables[var])
    stddev = math.sqrt(variance)

    # Round all numbers to set purecision
    if args.precision:
        min = round(min, int(args.precision[0]))
        max = round(max, int(args.precision[0]))
        mean = round(mean, int(args.precision[0]))
        variance = round(variance, int(args.precision[0]))
        stddev = round(stddev, int(args.precision[0]))

    if args.c:
        stats = [var.encode('UTF-8'), multiply(np.shape(ncFile.variables[var])), nmissing, "%14g" %min, "%14g" %max, "%14g" %mean, "%14g" %stddev, "%14g" %variance]
    else:
        stats = [var.encode('UTF-8'), multiply(np.shape(ncFile.variables[var])), nmissing, min, max, mean, stddev, variance]
    return stats

def print_stats(ncFile):
    var_array = [["Name", "nPoints", "nMissing", "Min", "Max", "Mean", "StdDev", "Variance"]]
    for var in ncFile.variables:
        if args.vars: # Only append -v Variables if flag was used
            for arg in args.vars:
		if arg[-1] == '+' and arg[0] == '+':
                    regex = re.compile(arg[1:-1])
                    if re.search(regex, var):
                        var_array.append(stats(var))
                elif arg[-1] == '+':
                    regex = re.compile(arg[:-1])
                    if re.match(regex, var):
		        var_array.append(stats(var))
                elif var == arg:
		    var_array.append(stats(var))

        else:
            var_array.append(stats(var))
    
    # Display error message if one or more -v VARS are not recognized 
    if args.vars:
        if len(var_array) < len(args.vars) + 1:
            sys.stderr.write("Error: One or more variables entered does not exist.\n")
            exit(1)
  
    # Display stats in columns if -c flag is used
    if args.c:
        col_width = 14
        name_width = max(len(str(var[0])) for var in var_array)
        for var in var_array:
            print "%s%s" %(var[0].ljust(name_width), "".join(str(var[stat]).rjust(col_width) for stat in range(1,8)))

    
    # Display stats in default comma separated view
    else:
        for var in var_array:
            print "%s, %s, %s, %s, %s, %s, %s, %s" %(var[0], var[1], var[2], var[3], var[4], var[5], var[6], var[7])
 

if args.time:
    
    # Calculate the beginning time of the file in seconds
    b = ncFile.variables["Time"].units.split(' ')[3]
    x = time.strptime(b, '%H:%M:%S')
    begin = int(datetime.timedelta(hours=x.tm_hour, minutes=x.tm_min, seconds=x.tm_sec).total_seconds())

    # Calculate the start time that the user specifies in seconds
    s = args.time[0]
    y = time.strptime(s, '%H:%M:%S')
    start = int(datetime.timedelta(hours=y.tm_hour, minutes=y.tm_min, seconds=y.tm_sec).total_seconds())

    # Calculate the end time that the user specifies in seconds
    e = args.time[1]
    z = time.strptime(e, '%H:%M:%S')
    end = int(datetime.timedelta(hours=z.tm_hour, minutes=z.tm_min, seconds=z.tm_sec).total_seconds())
    
    # Calculate the correct subsection of variables to preform calclations on
    start_t = start-begin
    end_t = end-begin

print_stats(ncFile)

ncFile.close()

